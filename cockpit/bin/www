#!/usr/bin/env node

/**
 * Module dependencies.
 */
const path = require('path');
var app = require('../app');
var debug = require('debug')('cockpit:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const io = require('socket.io')(server);

var msgOld = "";
var controlID = "";

var portNo = 'COM4';

function setPortNo(newone){
  portNo = newone;
}
function getPortNo(){
  return portNo;
}

io.on('connection', function(socket){
  console.log('a user connected');

  socket.on('datathrough', function(inp){
    var obj = JSON.parse(inp);
    var senderID = obj.ID;
    var msg = obj.message;
    var connected = false;

    if(!msg.toString().includes("<HAV_ts>")){
      console.log(senderID + ": " + msg);
    }

    if(!(msgOld === msg)){

      if(senderID != controlID && msg === "control"){
        controlID = senderID;
        console.log(senderID + " has been defined as the new controller");
        
      }else if(senderID === controlID){

        switch(msg){

          case "search":
            console.log("Searching for comport. Launching Python");

            //Runs python script to find com port
            const spawn = require('child_process').spawn;
            const ls = spawn('python', ["-u", path.join(__dirname, 'python/comgrabber.py')]);

            ls.stdout.on('data', function(data) {
              setPortNo(data.toString().substring(0,data.length-2));

              var msgtosend = {
                  "ID": "com",
                  "message": portNo
              }
              socket.emit('datathrough', JSON.stringify(msgtosend))
              console.log("Serial port is: " + portNo);
            });

            ls.stderr.on('data', (data) => {
              console.log(`stderr: ${data}`);
            });

            ls.on('close', (code) => {
              console.log(`child process exited with code ${code}`);
            });

            break;

          var sport;
          case "connect":
            console.log("Serial port is: " + portNo);
            const SerialPort = require('serialport');
            sport = new SerialPort(getPortNo().toString());

            sport.write('<HAV_pi>\n', function(err) {
              if (err) {
                return console.log('Error on write: ', err.message)
              }else {
                connected = true;
              }

              var msgtosend = {
                  "ID": "conn",
                  "message": "Linked"
              }
              socket.emit('datathrough', JSON.stringify(msgtosend));

              console.log('message written')
            })

            sport.on('data', function (data) {
              console.log('Data:', data)
            })

            // Open errors will be emitted as an error event
            sport.on('error', function(err) {
              console.log('Error: ', err.message)
            })

            break;

          default:
            if(connected){
              if(msg.toString().includes("<HAV_ts>")){
                msg = msg.toString().replace("<HAV_ts>", "");
              }

              sport.write(msg, function(err) {
                if (err) {
                  return console.log('Error on write: ', err.message)
                }
                console.log('message ' + msg + ' written')
              })

              break;
            }
        }

      }else {
          console.log(senderID + " is not controller..Ignoring");
      }

    }else {
      console.log("Duplicate message from " + senderID);
    }
    msgOld = msg;
  });
  
  socket.on('disconnect', function(){
    console.log('user disconnected');
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
